server.port = 8770
server.error.include-message=always

spring.application.name = itinerary-service

# disable discovery
spring.cloud.discovery.enabled = false

# disable cloud config and config discovery
spring.cloud.config.discovery.enabled = false
spring.cloud.config.enabled = false

# disable admin client
spring.boot.admin.client.enabled=false

# enabling H2 console at http://localhost:8091/h2-console
spring.h2.console.enabled=true

# database
spring.datasource.url=jdbc:h2:mem:productDB;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.platform=h2
spring.datasource.username=sa
spring.datasource.password=null

# jpa/hibernate
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=false
spring.jpa.properties.hibernate.format_sql=false

# overwriting jackson defaults to unify date serialization among services
spring.jackson.time-zone=UTC
spring.jackson.date-format=yyyy-MM-dd'T'HH:mm:ss'Z'

# disable eureka registration
eureka.client.registerWithEureka=false

management.endpoints.web.exposure.include=*

# swagger
swagger.descriptions.origin.value=example -> 'city_A'
swagger.descriptions.departure.value=example -> '10:00'
swagger.descriptions.list.value=list the itineraries, using parameters as filters
swagger.descriptions.list.notes=itineraries may be filtered by departure time or origin city; filters can be used together or individually; if no filter is used, return all the itineraries
swagger.descriptions.item-post.value=add an itinerary
swagger.descriptions.item-post.notes=WARNING! post requests should not include 'id', 'createdAt' and 'status' attributes
swagger.descriptions.item-get.value=get an itinerary
swagger.descriptions.item-put.value=update an itinerary
swagger.descriptions.item-delete.value=delete an itinerary
